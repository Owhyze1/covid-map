{"version":3,"sources":["webpack:///./src/assets/format.js","webpack:///./src/pages/index.js"],"names":["addComma","n","undefined","Number","isInteger","parseInt","str","toString","rem","length","output","slice","i","concat","CENTER","IndexPage","a","map","leafletElement","axios","get","response","console","log","data","Array","isArray","geoJson","type","features","country","countryInfo","lat","lng","long","properties","geometry","coordinates","L","GeoJSON","pointToLayer","feature","latlng","updatedFormatted","casesString","updated","active","cases","deaths","recovered","tests","todayCases","todayDeaths","testsPerOneMillion","casesPerOneMillion","deathsPerOneMillion","recoveredPerOneMillion","len","Date","toLocaleString","html","marker","icon","divIcon","className","riseOnHover","addTo","mapSettings","center","defaultBaseMap","zoom","mapEffect","Layout","pageName","Map"],"mappings":"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","file":"component---src-pages-index-js-401ec711990a7527b914.js","sourcesContent":["export const addComma = (n) => {\r\n    if ( n === undefined )\r\n        return;\r\n\r\n    // account for decimals\r\n    if ( !Number.isInteger(n) ){\r\n        n = parseInt(n);\r\n    }\r\n\r\n    const COMMA = ',';\r\n    let str = n.toString();\r\n    let rem = str.length % 3;\r\n    let output = ( typeof str !== 'string') ? str : str.slice(0, rem);\r\n\r\n    for ( let i = rem; i < str.length; i += 3){\r\n        if ( i === rem && rem === 0)\r\n            output = output.concat( str.slice( i, i+3 ));\r\n        else\r\n            output = output.concat( COMMA, str.slice( i, i+3 ));\r\n    }\r\n\r\n    return output;\r\n};","import React from 'react';\r\nimport Helmet from 'react-helmet';\r\nimport L from 'leaflet';\r\nimport axios from 'axios';\r\n\r\nimport Layout from 'components/Layout';\r\nimport Map from 'components/Map';\r\n\r\nimport { addComma } from 'assets/format';\r\n\r\nconst LOCATION = {\r\n  lat: 0,\r\n  lng: 0\r\n};\r\nconst CENTER = [LOCATION.lat, LOCATION.lng];\r\nconst DEFAULT_ZOOM = 2;\r\n\r\nconst IndexPage = () => {\r\n\r\n\r\n  /**\r\n   * mapEffect\r\n   * @description Fires a callback once the page renders\r\n   * @example Here this is and example of being used to zoom in and set a popup on load\r\n   */\r\n\r\n  async function mapEffect({ leafletElement : map } = {}) {\r\n    if ( !map ) return;\r\n\r\n    let response;\r\n\r\n    try {\r\n      response = await axios.get( 'https://corona.lmao.ninja/v2/countries?sort=country' );\r\n    } catch ( e ) {\r\n      console.log( 'Error receiving country data', e );\r\n      return;\r\n    }\r\n\r\n\r\n    const { data = [] } = response;\r\n    const hasData = Array.isArray( data ) && data.length > 0;\r\n\r\n    if ( !hasData ) return;\r\n\r\n    // convert numbers to strings to add comma\r\n    // let formattedData = format( data );\r\n\r\n    // console.log( 'API Countries Data: ', response );\r\n    // console.log( 'Filtered Countries: ', data );\r\n    // console.log( 'Formatted countries: ', formattedData );\r\n\r\n    // attach state data and GPS coordinates to each pointer\r\n    const geoJson = {\r\n      type: 'FeatureCollection',\r\n//      features: formattedData.map(( country = {}) => {\r\n      features: data.map(( country = {}) => {\r\n        const { countryInfo = {} } = country;\r\n        const { lat, long: lng } = countryInfo;\r\n\r\n        return {\r\n          type: 'Feature',\r\n          properties: {\r\n            ...country,\r\n          },\r\n          geometry: {\r\n            type: 'Point',\r\n            coordinates: [ lng, lat ]\r\n          }\r\n        };\r\n      })\r\n    };\r\n\r\n    // create pointers on Map with popup showing COVID data\r\n    const geoJsonLayers = new L.GeoJSON( geoJson, {\r\n      pointToLayer: ( feature = {}, latlng ) => {\r\n        const { properties = {} } = feature;\r\n        let updatedFormatted;\r\n        let casesString;\r\n\r\n        const {\r\n          country,\r\n          updated,\r\n          active,\r\n          cases,\r\n          deaths,\r\n          recovered,\r\n          tests,\r\n          todayCases,\r\n          todayDeaths,\r\n          testsPerOneMillion,\r\n          casesPerOneMillion,\r\n          deathsPerOneMillion,\r\n          recoveredPerOneMillion\r\n        } = properties;\r\n\r\n\r\n        casesString = `${addComma(cases)}`;\r\n        let len = casesString.length;\r\n\r\n        if ( len > 3 && len < 8 )\r\n          casesString = `${casesString.slice( 0, -4 )}k+`;\r\n        else if ( len > 8 && len < 12 )\r\n          casesString = `${casesString.slice(0, -8)}.${casesString.slice(-7, -6)}M`;\r\n\r\n\r\n\r\n        if ( updated ){\r\n          updatedFormatted = new Date( updated ).toLocaleString();\r\n        }\r\n\r\n        const html =\r\n        `<span class=\"icon-marker\">\r\n            <span class=\"icon-marker-tooltip\">\r\n              <h2>${country}</h2>\r\n              <ul>\r\n                <li style=\"color:yellow\"><strong>Active:</strong> ${addComma(active)}</li>\r\n                <li><strong>Confirmed:</strong> ${addComma(cases)}</li>\r\n                <li><strong>Deaths:</strong> ${addComma(deaths)}</li>\r\n                <li><strong>Recovered:</strong> ${addComma(recovered)}</li>\r\n                <li><strong>Tests:</strong> ${addComma(tests)}</li>\r\n                <li>- - -</li>\r\n                <li style=\"color:yellow\"><strong>Today's Cases:</strong> ${addComma(todayCases)}</li>\r\n                <li><strong>Today's Deaths:</strong> ${addComma(todayDeaths)}</li>\r\n                <li>- - -</li>\r\n                <li><strong>Tests Per Million:</strong> ${addComma(testsPerOneMillion)}</li>\r\n                <li><strong>Cases Per Million:</strong> ${addComma(casesPerOneMillion)}</li>\r\n                <li><strong>Deaths Per Million:</strong> ${addComma(deathsPerOneMillion)}</li>\r\n                <li><strong>Recovered Per Million:</strong> ${addComma(recoveredPerOneMillion)}</li>\r\n                <li><strong>Last Update:</strong> ${updatedFormatted}</li>\r\n              </ul>\r\n            </span>\r\n            ${ casesString }\r\n          </span>`;\r\n\r\n        return L.marker( latlng, {\r\n          icon: L.divIcon({\r\n            className: 'icon',\r\n            html\r\n          }),\r\n          riseOnHover: true,\r\n        });\r\n      }\r\n    });\r\n\r\n    geoJsonLayers.addTo( map );\r\n  }\r\n\r\n\r\n  const mapSettings = {\r\n    center: CENTER,\r\n    defaultBaseMap: 'OpenStreetMap',\r\n    zoom: DEFAULT_ZOOM,\r\n    mapEffect\r\n  };\r\n\r\n  return (\r\n    <Layout pageName=\"home\">\r\n      <Helmet>\r\n        <title>Home Page</title>\r\n      </Helmet>\r\n\r\n      <Map {...mapSettings} />\r\n    </Layout>\r\n  );\r\n};\r\n\r\nexport default IndexPage;\r\n"],"sourceRoot":""}