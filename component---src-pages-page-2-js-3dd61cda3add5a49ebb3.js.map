{"version":3,"sources":["webpack:///./src/assets/state-coords.js","webpack:///./src/pages/page-2.js"],"names":["States","Alaska","lat","lng","Alabama","Arkansas","Arizona","California","Colorado","Connecticut","Delaware","Florida","Georgia","Hawaii","Iowa","Idaho","Illinois","Indiana","Kansas","Kentucky","Louisiana","Massachusetts","Maryland","Maine","Michigan","Minnesota","Missouri","Mississippi","Montana","Nebraska","Nevada","Ohio","Oklahoma","Oregon","Pennsylvania","Tennessee","Texas","Utah","Virginia","Vermont","Washington","Wisconsin","Wyoming","Guam","CENTER","SecondPage","a","map","leafletElement","axios","get","response","console","log","data","Array","isArray","length","dataFiltered","filter","currentState","hasOwnProperty","state","formattedData","format","buildSideMenu","geoJson","type","features","stateInfo","properties","geometry","coordinates","L","GeoJSON","pointToLayer","feature","latlng","casesString","updatedFormatted","updated","active","cases","todayCases","deaths","todayDeaths","tests","testsPerOneMillion","casesPerOneMillion","deathsPerOneMillion","slice","Date","toLocaleString","html","marker","icon","divIcon","className","riseOnHover","addTo","mapSettings","center","defaultBaseMap","zoom","mapEffect","array","temp","s","u","c","cpom","d","dpom","t","tpom","tc","td","push","addComma","num","undefined","str","toString","rem","output","i","concat","stateName","caseNumber","tr","document","createElement","setAttribute","insertCell","innerHTML","getElementById","appendChild","Layout","pageName","Container","Map","id"],"mappings":"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","file":"component---src-pages-page-2-js-3dd61cda3add5a49ebb3.js","sourcesContent":["// source\r\n// https://developers.google.com/public-data/docs/canonical/states_csv\r\n\r\nconst States = {\r\n  Alaska     : { lat: 63.588753, lng: \t-154.493062},\r\n  Alabama    : { lat: 32.318231, lng: -86.902298},\r\n  Arkansas   : { lat: 35.20105, lng: -91.831833},\r\n  Arizona    : { lat: 34.048928, lng: -111.093731},\r\n  California : { lat: 36.778261, lng: -119.417932},\r\n  Colorado   : { lat: 39.550051, lng: -105.782067},\r\n  Connecticut: { lat: 41.603221, lng: -73.087749},\r\n  'District Of Columbia'\r\n  : { lat: 38.905985, lng: -77.033418},\r\n  Delaware   : { lat: 38.910832, lng: -75.52767},\r\n  Florida    : { lat: 27.664827, lng: -81.515754},\r\n  Georgia    : { lat: 32.157435, lng: -82.907123},\r\n  Hawaii     : { lat: 19.898682, lng: -155.665857},\r\n  Iowa       : { lat: 41.878003, lng: -93.097702},\r\n  Idaho      : { lat: 44.068202, lng: -114.742041},\r\n  Illinois   : { lat: 40.633125, lng: -89.398528},\r\n  Indiana    : { lat: 40.551217, lng: -85.602364},\r\n  Kansas     : { lat: 39.011902, lng: -98.484246},\r\n  Kentucky   : { lat: 37.839333, lng: -84.270018},\r\n  Louisiana  : { lat: 31.244823, lng: -92.145024},\r\n  Massachusetts\r\n  : { lat: 42.407211, lng: -71.382437},\r\n  Maryland   : { lat: 39.045755, lng: -76.651271},\r\n  Maine      : { lat: 45.253783, lng: -69.445469},\r\n  Michigan   : { lat: 44.314844, lng: -85.602364},\r\n  Minnesota  : { lat: 46.729553, lng: -94.6859},\r\n  Missouri   : { lat: 37.964253, lng: -91.831833},\r\n  Mississippi\r\n  : { lat: 32.354668, lng: -89.398528},\r\n  Montana    : { lat: 46.879682, lng: -110.362566},\r\n  'North Carolina'\r\n  : { lat: 35.759573, lng: -79.0193},\r\n  'North Dakota'\r\n  : { lat: 47.551493, lng: -101.002012},\r\n  Nebraska   : { lat: 41.492537, lng: -99.901813},\r\n  'New Hampshire'\r\n  : { lat: 43.193852, lng: -71.572395},\r\n  'New Jersey'\r\n  : { lat: 40.058324, lng: -74.405661},\r\n  'New Mexico'\r\n  : { lat: 34.97273, lng: -105.032363},\r\n  Nevada     : { lat: 38.80261, lng: -116.419389},\r\n  'New York' : { lat: 43.299428, lng: -74.217933},\r\n  Ohio       : { lat: 40.417287, lng: -82.907123},\r\n  Oklahoma   : { lat: 35.007752, lng: -97.092877},\r\n  Oregon     : { lat: 43.804133, lng: -120.554201},\r\n  Pennsylvania\r\n  : { lat: 41.203322, lng: -77.194525},\r\n  'Puerto Rico'\r\n  : { lat: 18.220833, lng: -66.590149},\r\n  'Rhode Island'\r\n  : { lat: 41.580095, lng: -71.477429},\r\n  'South Carolina'\r\n  : { lat: 33.836081, lng: -81.163725},\r\n  'South Dakota'\r\n  : { lat: 43.969515, lng: -99.901813},\r\n  Tennessee  : { lat: 35.517491, lng: -86.580447},\r\n  Texas      : { lat: 31.968599, lng: -99.901813},\r\n  Utah       : { lat: 39.32098, lng: -111.093731},\r\n  Virginia   : { lat: 37.431573, lng: -78.656894},\r\n  Vermont    : { lat: 44.558803, lng: -72.577841},\r\n  Washington : { lat: 47.751074, lng: -120.740139},\r\n  Wisconsin  : { lat: 43.78444, lng: -88.787868},\r\n  'West Virginia'\r\n  : { lat: 38.597626, lng: -80.454903},\r\n  Wyoming    : { lat: 43.075968, lng: -107.290284},\r\n\r\n\r\n  //USATotal: { lat: 37.90902, lng: -95.7129},\r\n  Guam       : { lat: 13.4443 , lng: 144.7937},\r\n  'Northern Mariana Islands'\r\n  :  { lat: 15.0979, lng: 145.6739},\r\n  'United States Virgin Islands'\r\n  :  { lat: 18.3358, lng: -64.8963},\r\n  'Navajo Nation'\r\n  :  { lat: 36.0672, lng: -109.1880},\r\n  // US Military\r\n  //            :  { lat: null, lng: null},\r\n  // GrandPrincessShip\r\n  //            :  { lat: null, lng: null},\r\n  // WuhanRepatriated\r\n  //            :  { lat: null, lng: null},\r\n  // DiamondPrincessShip\r\n  //            :  { lat: null, lng: null}\r\n\r\n\r\n\r\n};\r\n\r\nexport default States;\r\n","// Novel Covid API\r\n// https://corona.lmao.ninja/docs/#/Countries/get_countries\r\n\r\nimport React from 'react';\r\nimport Helmet from 'react-helmet';\r\nimport L from 'leaflet';\r\nimport axios from 'axios';\r\n\r\nimport Layout from 'components/Layout';\r\nimport Map from 'components/Map';\r\nimport Container from 'components/Container';\r\nimport States from 'assets/state-coords';\r\n\r\nconst LOCATION = {\r\n  lat: 42,\r\n  lng: -100\r\n};\r\nconst CENTER = [LOCATION.lat, LOCATION.lng];\r\nconst DEFAULT_ZOOM = 3.5;\r\n\r\n// var dataFiltered;\r\n\r\n\r\nconst SecondPage = () => {\r\n\r\n  // get API data\r\n  async function mapEffect({ leafletElement : map } = {}) {\r\n    if ( !map ) return;\r\n\r\n    let response;\r\n\r\n    try {\r\n      response = await axios.get( 'https://corona.lmao.ninja/v2/states' );\r\n    } catch ( e ) {\r\n      console.log( 'Error obtaining states data', e );\r\n      return;\r\n    }\r\n\r\n\r\n    const { data = [] } = response;\r\n    const hasData = Array.isArray( data ) && data.length > 0;\r\n\r\n    if ( !hasData ) return;\r\n\r\n    // remove data points from API data without GPS coordinates\r\n    const dataFiltered = data.filter(\r\n      function( currentState ){\r\n        return States.hasOwnProperty( currentState.state );\r\n      }\r\n    );\r\n\r\n    let formattedData = format( dataFiltered );\r\n\r\n    console.log( 'All US API Data', response );\r\n    console.log( 'Filtered: ', dataFiltered );\r\n    console.log( 'Formatted: ', formattedData );\r\n\r\n    buildSideMenu( formattedData );\r\n\r\n    const geoJson = {\r\n      type: 'FeatureCollection',\r\n      features: formattedData.map(( stateInfo = {}) => {\r\n        // coronavirus stats for each state\r\n        const { state } = stateInfo;\r\n\r\n        // GPS data for each state in API\r\n        const { lat, lng } = States[state];\r\n\r\n        // return stateInfo and GPS data for each point on map\r\n        return {\r\n          type: 'Feature',\r\n          properties: {\r\n            ...stateInfo,\r\n          },\r\n          geometry: {\r\n            type: 'Point',\r\n            coordinates: [ lng, lat ]\r\n          }\r\n        };\r\n      })\r\n    };\r\n\r\n    const geoJsonLayers = new L.GeoJSON( geoJson, {\r\n      pointToLayer: ( feature = {}, latlng ) => {\r\n        const { properties = {} } = feature;\r\n        let casesString;\r\n        let updatedFormatted;\r\n\r\n        let {\r\n          updated,\r\n          state,\r\n          active,\r\n          cases,\r\n          todayCases,\r\n          deaths,\r\n          todayDeaths,\r\n          tests,\r\n          testsPerOneMillion,\r\n          casesPerOneMillion,\r\n          deathsPerOneMillion\r\n        } = properties;\r\n\r\n        casesString = `${cases}`;\r\n        let len = cases.length;\r\n\r\n        if ( len > 3 )\r\n          casesString = `${casesString.slice( 0, -4 )}k+`;\r\n\r\n        if ( updated )\r\n          updatedFormatted = new Date( updated ).toLocaleString();\r\n\r\n        const html =\r\n        `<span class=\"icon-marker\">\r\n            <span class=\"icon-marker-tooltip\">\r\n              <h2>${state}</h2>\r\n              <ul>\r\n                <li style=\"color:yellow\"><strong>Active:</strong> ${active}</li>\r\n                <li><strong>Confirmed:</strong> ${cases}</li>\r\n                <li><strong>Deaths:</strong> ${deaths}</li>\r\n                <li><strong>Tests:</strong>${tests}</li>\r\n                <li>- - -</li>\r\n                <li style=\"color:yellow\"><strong>Today's Cases:</strong> ${todayCases}</li>\r\n                <li><strong>Today's Deaths:</strong> ${todayDeaths}</li>\r\n                <li>- - -</li>\r\n                <li><strong>Tests Per Million:</strong> ${testsPerOneMillion}</li>\r\n                <li><strong>Cases Per Million:</strong> ${casesPerOneMillion}</li>\r\n                <li><strong>Deaths Per Million:</strong> ${deathsPerOneMillion}</li>\r\n\r\n                <li><strong>Last Updated:</strong> ${updatedFormatted}</li>\r\n              </ul>\r\n            </span>\r\n            ${ casesString }\r\n          </span>`;\r\n\r\n        return L.marker( latlng, {\r\n          icon: L.divIcon({\r\n            className: 'icon',\r\n            html\r\n          }),\r\n          riseOnHover: true\r\n        });\r\n      }\r\n    });\r\n\r\n    geoJsonLayers.addTo( map );\r\n  }\r\n\r\n\r\n  const mapSettings = {\r\n    center: CENTER,\r\n    defaultBaseMap: 'OpenStreetMap',\r\n    zoom: DEFAULT_ZOOM,\r\n    mapEffect\r\n  };\r\n\r\n  function format( array ){\r\n\r\n    let temp = [];\r\n\r\n    for ( const {\r\n      state: s,\r\n      updated: u,\r\n      active: a,\r\n      cases: c,\r\n      casesPerOneMillion: cpom,\r\n      deaths: d,\r\n      deathsPerOneMillion: dpom,\r\n      tests: t,\r\n      testsPerOneMillion: tpom,\r\n      todayCases: tc,\r\n      todayDeaths: td,\r\n    } of array ){\r\n      temp.push({\r\n        state: s,\r\n        updated: u,\r\n        active: addComma( a ),\r\n        cases: addComma( c ),\r\n        casesPerOneMillion: addComma( cpom ),\r\n        deaths: addComma( d ),\r\n        deathsPerOneMillion: addComma( dpom ),\r\n        tests: addComma( t ),\r\n        testsPerOneMillion: addComma( tpom ),\r\n        todayCases: addComma( tc ),\r\n        todayDeaths: addComma( td ),\r\n      });\r\n    }\r\n    return temp;\r\n  }\r\n  function addComma( num ){\r\n\r\n    if ( num === undefined )\r\n      return;\r\n\r\n    const COMMA = ',';\r\n    let str = num.toString();\r\n    let rem = str.length % 3;\r\n    let output = ( typeof str !== 'string' ) ? str : str.slice( 0,rem );\r\n\r\n    for ( let i = rem; i < str.length; i += 3 ){\r\n      if ( i === rem && rem === 0 )\r\n        output = output.concat( str.slice( i, i+3 ));\r\n      else {\r\n        output = output.concat( COMMA, str.slice( i, i+3 ));\r\n      }\r\n    }\r\n    return output;\r\n  }\r\n  function buildSideMenu( array ){\r\n    if ( array === undefined ) return;\r\n\r\n    for ( var i = 0; i < array.length; i++ ){\r\n\r\n      var stateName = array[i].state;\r\n      var caseNumber = array[i].cases;//comma(array[i].cases.toString());\r\n\r\n      if ( stateName !== undefined && caseNumber !== undefined ){\r\n        var tr = document.createElement( 'tr' );\r\n\r\n        tr.setAttribute( 'class', 'row' );\r\n        tr.insertCell( 0 ).innerHTML = stateName;\r\n        // tr.setAttribute('class', \"right\");\r\n        tr.insertCell( 1 ).innerHTML = caseNumber;\r\n\r\n        document.getElementById( 'states-list' ).appendChild( tr );\r\n      }\r\n    }\r\n  }\r\n\r\n  // Javascript and HTML for page\r\n  return (\r\n    <Layout pageName=\"two\">\r\n      <Helmet>\r\n        <title>United States</title>\r\n      </Helmet>\r\n      <Container className=\"map-grid\">\r\n        <Map {...mapSettings} />\r\n        <div className=\"div-table\">\r\n          <table className=\"table\">\r\n            <thead>\r\n              <tr>\r\n                <th className=\"left-header\">State</th>\r\n                <th className=\"right-header\">Cases</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody id=\"states-list\"></tbody>\r\n          </table>\r\n        </div>\r\n      </Container>\r\n    </Layout>\r\n  );\r\n};\r\n\r\nexport default SecondPage;\r\n"],"sourceRoot":""}