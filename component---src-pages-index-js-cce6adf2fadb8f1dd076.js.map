{"version":3,"sources":["webpack:///./src/pages/index.js","webpack:///./node_modules/core-js/modules/es6.number.is-integer.js","webpack:///./node_modules/core-js/modules/_is-integer.js"],"names":["CENTER","IndexPage","a","map","leafletElement","axios","get","response","console","log","data","Array","isArray","length","geoJson","type","features","country","countryInfo","lat","lng","long","properties","geometry","coordinates","L","GeoJSON","pointToLayer","feature","latlng","updatedFormatted","casesString","updated","active","cases","deaths","recovered","tests","todayCases","todayDeaths","testsPerOneMillion","casesPerOneMillion","deathsPerOneMillion","recoveredPerOneMillion","len","addComma","slice","Date","toLocaleString","html","marker","icon","divIcon","className","riseOnHover","addTo","mapSettings","center","defaultBaseMap","zoom","mapEffect","num","undefined","Number","isInteger","str","toString","rem","output","i","concat","pageName","$export","S","isObject","floor","Math","module","exports","it","isFinite"],"mappings":"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","file":"component---src-pages-index-js-cce6adf2fadb8f1dd076.js","sourcesContent":["import React from 'react';\r\nimport Helmet from 'react-helmet';\r\nimport L from 'leaflet';\r\nimport axios from 'axios';\r\n\r\nimport Layout from 'components/Layout';\r\nimport Map from 'components/Map';\r\n\r\nconst LOCATION = {\r\n  lat: 0,\r\n  lng: 0\r\n};\r\nconst CENTER = [LOCATION.lat, LOCATION.lng];\r\nconst DEFAULT_ZOOM = 2;\r\n\r\nconst IndexPage = () => {\r\n\r\n\r\n  /**\r\n   * mapEffect\r\n   * @description Fires a callback once the page renders\r\n   * @example Here this is and example of being used to zoom in and set a popup on load\r\n   */\r\n\r\n  async function mapEffect({ leafletElement : map } = {}) {\r\n    if ( !map ) return;\r\n\r\n    let response;\r\n\r\n    try {\r\n      response = await axios.get( 'https://corona.lmao.ninja/v2/countries?sort=country' );\r\n    } catch ( e ) {\r\n      console.log( 'Error receiving country data', e );\r\n      return;\r\n    }\r\n\r\n\r\n    const { data = [] } = response;\r\n    const hasData = Array.isArray( data ) && data.length > 0;\r\n\r\n    if ( !hasData ) return;\r\n\r\n    // convert numbers to strings to add comma\r\n    // let formattedData = format( data );\r\n\r\n    // console.log( 'API Countries Data: ', response );\r\n    // console.log( 'Filtered Countries: ', data );\r\n    // console.log( 'Formatted countries: ', formattedData );\r\n\r\n    // attach state data and GPS coordinates to each pointer\r\n    const geoJson = {\r\n      type: 'FeatureCollection',\r\n//      features: formattedData.map(( country = {}) => {\r\n      features: data.map(( country = {}) => {\r\n        const { countryInfo = {} } = country;\r\n        const { lat, long: lng } = countryInfo;\r\n\r\n        return {\r\n          type: 'Feature',\r\n          properties: {\r\n            ...country,\r\n          },\r\n          geometry: {\r\n            type: 'Point',\r\n            coordinates: [ lng, lat ]\r\n          }\r\n        };\r\n      })\r\n    };\r\n\r\n    // create pointers on Map with popup showing COVID data\r\n    const geoJsonLayers = new L.GeoJSON( geoJson, {\r\n      pointToLayer: ( feature = {}, latlng ) => {\r\n        const { properties = {} } = feature;\r\n        let updatedFormatted;\r\n        let casesString;\r\n\r\n        const {\r\n          country,\r\n          updated,\r\n          active,\r\n          cases,\r\n          deaths,\r\n          recovered,\r\n          tests,\r\n          todayCases,\r\n          todayDeaths,\r\n          testsPerOneMillion,\r\n          casesPerOneMillion,\r\n          deathsPerOneMillion,\r\n          recoveredPerOneMillion\r\n        } = properties;\r\n\r\n\r\n        casesString = `${addComma(cases)}`;\r\n        let len = casesString.length;\r\n\r\n        if ( len > 3 && len < 8 )\r\n          casesString = `${casesString.slice( 0, -4 )}k+`;\r\n        else if ( len > 8 && len < 12 )\r\n          casesString = `${casesString.slice(0, -8)}.${casesString.slice(-7, -6)}M`;\r\n\r\n\r\n\r\n        if ( updated ){\r\n          updatedFormatted = new Date( updated ).toLocaleString();\r\n        }\r\n\r\n        const html =\r\n        `<span class=\"icon-marker\">\r\n            <span class=\"icon-marker-tooltip\">\r\n              <h2>${country}</h2>\r\n              <ul>\r\n                <li style=\"color:yellow\"><strong>Active:</strong> ${addComma(active)}</li>\r\n                <li><strong>Confirmed:</strong> ${addComma(cases)}</li>\r\n                <li><strong>Deaths:</strong> ${addComma(deaths)}</li>\r\n                <li><strong>Recovered:</strong> ${addComma(recovered)}</li>\r\n                <li><strong>Tests:</strong> ${addComma(tests)}</li>\r\n                <li>- - -</li>\r\n                <li style=\"color:yellow\"><strong>Today's Cases:</strong> ${addComma(todayCases)}</li>\r\n                <li><strong>Today's Deaths:</strong> ${addComma(todayDeaths)}</li>\r\n                <li>- - -</li>\r\n                <li><strong>Tests Per Million:</strong> ${addComma(testsPerOneMillion)}</li>\r\n                <li><strong>Cases Per Million:</strong> ${addComma(casesPerOneMillion)}</li>\r\n                <li><strong>Deaths Per Million:</strong> ${addComma(deathsPerOneMillion)}</li>\r\n                <li><strong>Recovered Per Million:</strong> ${addComma(recoveredPerOneMillion)}</li>\r\n                <li><strong>Last Update:</strong> ${updatedFormatted}</li>\r\n              </ul>\r\n            </span>\r\n            ${ casesString }\r\n          </span>`;\r\n        // const html =\r\n        // `<span class=\"icon-marker\">\r\n        //     <span class=\"icon-marker-tooltip\">\r\n        //       <h2>${country}</h2>\r\n        //       <ul>\r\n        //         <li style=\"color:yellow\"><strong>Active:</strong> ${active}</li>\r\n        //         <li><strong>Confirmed:</strong> ${cases}</li>\r\n        //         <li><strong>Deaths:</strong> ${deaths}</li>\r\n        //         <li><strong>Recovered:</strong> ${recovered}</li>\r\n        //         <li><strong>Tests:</strong> ${tests}</li>\r\n        //         <li>- - -</li>\r\n        //         <li style=\"color:yellow\"><strong>Today's Cases:</strong> ${todayCases}</li>\r\n        //         <li><strong>Today's Deaths:</strong> ${todayDeaths}</li>\r\n        //         <li>- - -</li>\r\n        //         <li><strong>Tests Per Million:</strong> ${testsPerOneMillion}</li>\r\n        //         <li><strong>Cases Per Million:</strong> ${casesPerOneMillion}</li>\r\n        //         <li><strong>Deaths Per Million:</strong> ${deathsPerOneMillion}</li>\r\n        //         <li><strong>Recovered Per Million:</strong> ${recoveredPerOneMillion}</li>\r\n        //         <li><strong>Last Update:</strong> ${updatedFormatted}</li>\r\n        //       </ul>\r\n        //     </span>\r\n        //     ${ casesString }\r\n        //   </span>`;\r\n\r\n\r\n        return L.marker( latlng, {\r\n          icon: L.divIcon({\r\n            className: 'icon',\r\n            html\r\n          }),\r\n          riseOnHover: true,\r\n        });\r\n      }\r\n    });\r\n\r\n    geoJsonLayers.addTo( map );\r\n  }\r\n\r\n\r\n  const mapSettings = {\r\n    center: CENTER,\r\n    defaultBaseMap: 'OpenStreetMap',\r\n    zoom: DEFAULT_ZOOM,\r\n    mapEffect\r\n  };\r\n\r\n  // function format( array ){\r\n  //\r\n  //   let temp = [];\r\n  //\r\n  //   for ( const {\r\n  //     countryInfo: coInfo,\r\n  //     country: co,\r\n  //     updated: u,\r\n  //     active: a,\r\n  //     cases: c,\r\n  //     recovered: r,\r\n  //     deaths: d,\r\n  //     tests: t,\r\n  //     todayCases: tc,\r\n  //     todayDeaths: td,\r\n  //     recoveredPerOneMillion: rpom,\r\n  //     casesPerOneMillion: cpom,\r\n  //     deathsPerOneMillion: dpom,\r\n  //     testsPerOneMillion: tpom,\r\n  //   } of array ){\r\n  //     temp.push({\r\n  //       countryInfo: coInfo,\r\n  //       country: co,\r\n  //       updated: u,\r\n  //       active: addComma( a ),\r\n  //       cases: addComma( c ),\r\n  //       recovered: addComma( r ),\r\n  //       deaths: addComma( d ),\r\n  //       tests: addComma( t ),\r\n  //       todayCases: addComma( tc ),\r\n  //       todayDeaths: addComma( td ),\r\n  //       recoveredPerOneMillion: addComma( rpom ),\r\n  //       casesPerOneMillion: addComma( cpom ),\r\n  //       deathsPerOneMillion: addComma( dpom ),\r\n  //       testsPerOneMillion: addComma( tpom )\r\n  //     });\r\n  //   }\r\n  //   return temp;\r\n  // }\r\n\r\n  function addComma( num ){\r\n\r\n    if ( num === undefined )\r\n      return;\r\n\r\n    // account for decimals\r\n    if ( !Number.isInteger(num) ){\r\n\r\n    }\r\n\r\n    const COMMA = ',';\r\n    let str = num.toString();\r\n    let rem = str.length % 3;\r\n    let output = ( typeof str !== 'string' ) ? str : str.slice( 0,rem );\r\n\r\n    for ( let i = rem; i < str.length; i += 3 ){\r\n      if ( i === rem && rem === 0 )\r\n        output = output.concat( str.slice( i, i+3 ));\r\n      else {\r\n        output = output.concat( COMMA, str.slice( i, i+3 ));\r\n      }\r\n    }\r\n    return output;\r\n  }\r\n\r\n  return (\r\n    <Layout pageName=\"home\">\r\n      <Helmet>\r\n        <title>Home Page</title>\r\n      </Helmet>\r\n\r\n      <Map {...mapSettings} />\r\n    </Layout>\r\n  );\r\n};\r\n\r\nexport default IndexPage;\r\n","// 20.1.2.3 Number.isInteger(number)\nvar $export = require('./_export');\n\n$export($export.S, 'Number', { isInteger: require('./_is-integer') });\n","// 20.1.2.3 Number.isInteger(number)\nvar isObject = require('./_is-object');\nvar floor = Math.floor;\nmodule.exports = function isInteger(it) {\n  return !isObject(it) && isFinite(it) && floor(it) === it;\n};\n"],"sourceRoot":""}